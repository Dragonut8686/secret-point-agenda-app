
// supabase/functions/register_user/index.ts

import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // 1) CORS preflight
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    const update = await req.json()
    
    // 2) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase Client —Å Service Role Key
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
    const botToken = Deno.env.get('BOT_TOKEN')!
    const supabase = createClient(supabaseUrl, supabaseKey)

    // 3) –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query (–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å")
    if (update.callback_query) {
      const callbackQuery = update.callback_query
      const data = callbackQuery.data
      const from = callbackQuery.from
      const telegram_id = from.id

      if (data && data.startsWith('answer:')) {
        const questionId = data.split(':')[1]
        
        // –û–±–Ω–æ–≤–ª—è–µ–º pending_question_id –¥–ª—è —Å–ø–∏–∫–µ—Ä–∞
        const { error: updateError } = await supabase
          .from('participants')
          .upsert(
            { 
              telegram_id: telegram_id.toString(), 
              pending_question_id: questionId 
            },
            { onConflict: 'telegram_id' }
          )
        
        if (updateError) {
          console.error('Error updating participant:', updateError)
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–∏–∫–µ—Ä—É
        await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            chat_id: telegram_id,
            text: 'üìù –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.',
            parse_mode: 'HTML',
          }),
        })

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback
        await fetch(`https://api.telegram.org/bot${botToken}/answerCallbackQuery`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            callback_query_id: callbackQuery.id,
            text: '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏',
          }),
        })

        return new Response(
          JSON.stringify({ status: 'callback_processed' }),
          { status: 200, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        )
      }
    }

    // 4) –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Ç–≤–µ—Ç—ã —Å–ø–∏–∫–µ—Ä–æ–≤)
    if (update.message && update.message.text) {
      const message = update.message
      const from = message.from
      const telegram_id = from.id.toString()
      const answerText = message.text

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ pending_question_id –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: participant } = await supabase
        .from('participants')
        .select('pending_question_id')
        .eq('telegram_id', telegram_id)
        .maybeSingle()

      if (participant && participant.pending_question_id) {
        const questionId = participant.pending_question_id

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –∏ —Å–ø–∏–∫–µ—Ä–∞
        const { data: questionData } = await supabase
          .from('questions')
          .select(`
            id,
            text,
            author_telegram_id,
            speakers!inner(name)
          `)
          .eq('id', questionId)
          .single()

        if (questionData) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å –æ—Ç–≤–µ—Ç–æ–º
          await supabase
            .from('questions')
            .update({
              answer_text: answerText,
              answered_at: new Date().toISOString(),
              is_answered: true
            })
            .eq('id', questionId)

          // –û—á–∏—â–∞–µ–º pending_question_id
          await supabase
            .from('participants')
            .update({ pending_question_id: null })
            .eq('telegram_id', telegram_id)

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É –≤–æ–ø—Ä–æ—Å–∞
          if (questionData.author_telegram_id) {
            const speakerName = questionData.speakers.name
            const questionText = questionData.text
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
            const now = new Date()
            const date = now.toLocaleDateString('ru-RU', { timeZone: 'Europe/Moscow' })
            const time = now.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit', timeZone: 'Europe/Moscow' })

            const responseMessage = [
              `‚úâÔ∏è <b>–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:</b> <i>${escapeHtml(questionText)}</i>`,
              ``,
              `üë§ <b>–û—Ç:</b> ${escapeHtml(speakerName)}`,
              `üïí <b>–í—Ä–µ–º—è:</b> ${date} ${time}`,
              `üì© <b>–û—Ç–≤–µ—Ç:</b> ${escapeHtml(answerText)}`
            ].join('\n')

            await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                chat_id: questionData.author_telegram_id,
                text: responseMessage,
                parse_mode: 'HTML',
              }),
            })
          }

          // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å–ø–∏–∫–µ—Ä—É
          await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              chat_id: telegram_id,
              text: '‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ—Ä—É –≤–æ–ø—Ä–æ—Å–∞!',
              parse_mode: 'HTML',
            }),
          })

          return new Response(
            JSON.stringify({ status: 'answer_processed' }),
            { status: 200, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
          )
        }
      }
    }

    // 5) –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    const message = update.message
    if (!message || message.text !== '/start') {
      return new Response(
        JSON.stringify({ status: 'ignored' }),
        { status: 200, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    // 6) –î–æ—Å—Ç–∞—ë–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const from = message.from!
    const telegram_id = from.id
    const username = from.username || null
    const full_name = [from.first_name, from.last_name]
      .filter(Boolean)
      .join(' ') || null

    // 7) –í–ø–∏—Å—ã–≤–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
    const { error: upsertError } = await supabase
      .from('participants')
      .upsert(
        { telegram_id: telegram_id.toString(), username, full_name },
        { onConflict: 'telegram_id' }
      )
    if (upsertError) throw upsertError

    // 8) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const welcomeText = [
      `üëã –ü—Ä–∏–≤–µ—Ç, ${full_name ?? '–¥—Ä—É–≥'}!`,
      ``,
      `–≠—Ç–æ –±–æ—Ç –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ SecretPointConf2025.`,
      `–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ú–µ–Ω—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è¬ª –≤–Ω–∏–∑—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –¥–æ–∫–ª–∞–¥—ã –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–∏–∫–µ—Ä—É.`,
      ``,
      `–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ ‚Äî –ø–∏—à–∏—Ç–µ —Å—é–¥–∞ –≤ —á–∞—Ç, —è –ø–æ–º–æ–≥—É!`
    ].join('\n')

    await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: telegram_id,
        text: welcomeText,
        parse_mode: 'HTML',
      }),
    })

    // 9) –ó–∞–≤–µ—Ä—à–∞–µ–º —Å —É—Å–ø–µ—Ö–æ–º
    return new Response(
      JSON.stringify({ status: 'ok', telegram_id }),
      { status: 200, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )
  } catch (err: any) {
    console.error('Error in register_user function:', err)
    return new Response(
      JSON.stringify({ error: err.message }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )
  }
})

// –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML-—Ç—ç–≥–∏
function escapeHtml(str: string): string {
  return str
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
}
